   vector<int> subsetSums(vector<int> arr, int N){
        vector<int>ans;
        int k=pow(2,N)-1;
        while(k>=0){
            int sum=0;
            for(int i=0;i<N;i++){
                if(k>>i&1)  sum+=arr[i];
            }
            k--;
            ans.push_back(sum);
        }
        sort(ans.begin(),ans.end());
        return ans;
    }


//recursive sol
   void helper(vector<int>&arr,int N,vector<int>&ans,int ind,int sum){
            ans.push_back(sum);
            
        for(int i=ind;i<N;i++){
            sum+=arr[i];
            helper(arr,N,ans,i+1,sum);
            sum-=arr[i];
        }
        return;
    }
    vector<int> subsetSums(vector<int> arr, int N)
    {   vector<int>ans;
        helper(arr,N,ans,0,0);
        sort(ans.begin(),ans.end());
        return ans;
    }
